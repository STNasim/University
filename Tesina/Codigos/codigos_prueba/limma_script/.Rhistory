args <- commandArgs(trailingOnly = TRUE)
if(args[1]) {nombre_archivo = args[1]}
lis = "control tratamiento2    tratamiento     tratamiento     control tratamiento2   tratamiento                                                       tratamiento2     control tratamiento2    control tratamiento     control tratamiento"
group <- unlist(strsplit(group_info, "\t"))
group <- unlist(strsplit(lis, "\t"))
lis == group
lis = "control;tratamiento2;tratamiento;tratamiento;control;tratamiento2;tratamiento;tratamiento2;control;tratamiento2;control;tratamiento;control;tratamiento"
group <- unlist(strsplit(lis, ";"))
library("limma")
nombre_archivo_entrada = "agrupado3.tsv"
nombre_archivo_salida = "salida.tsv"
# Read data
data <- read.table(nombre_archivo_entrada, header = TRUE, row.names = 1, sep = "\t", check.names = FALSE, skip = 2)
setwd("G:/Mi unidad/Facultad/Tesina/Tesina Salim Nasim (compartida)/Prototipo funcional/prototipo_codigo/src/limma_script")
# Read data
data <- read.table(nombre_archivo_entrada, header = TRUE, row.names = 1, sep = "\t", check.names = FALSE, skip = 2)
filas <- rownames(data)
# Read group information
grupo_control <- readLines(nombre_archivo_entrada, n = 1)
group_info <- readLines(nombre_archivo_entrada, n = 2)
group <- unlist(strsplit(group_info, "\t"))[-1:-2]
# Convert non-numeric columns to numeric
data <- as.data.frame(lapply(data, function(x) as.numeric(as.character(x))))
rownames(data) <- filas
# Remove rows with missing values
data <- na.omit(data)
# Prepare the data for analysis
data_matrix <- as.matrix(data)
rownames(data_matrix) <- rownames(data)
colnames(data_matrix) <- colnames(data)
# Create a design matrix
group_factor <- factor(group)
design <- model.matrix(~0 + group_factor)
colnames(design) <- levels(group_factor)
View(design)
# Define the contrasts for each comparison
group_names <- colnames(design)[2:length(colnames(design))]
group_names
# Define the contrasts for each comparison
group_names <- colnames(design)
group_names <- group_names[group_names != grupo_control]
contrast_list <- list()
for (grupo in group_names) {
contrast_list <- append(contrast_list,paste0(grupo_control," - ",grupo))
}
# Create contrasts using the contrast_list
contrasts_matrix <- makeContrasts(contrasts = contrast_list, levels = design)
if (!"BiocManager" %in% rownames(installed.packages()))
install.packages("BiocManager")
BiocManager::install(c("limma"), dependencies=TRUE)
library("limma")
#args <- commandArgs(trailingOnly = TRUE)
#nombre_archivo_entrada = args[1]
#nombre_archivo_salida = args[2]
nombre_archivo_entrada = "agrupado3.tsv"
nombre_archivo_salida = "salida.tsv"
# Read data
data <- read.table(nombre_archivo_entrada, header = TRUE, row.names = 1, sep = "\t", check.names = FALSE, skip = 2)
filas <- rownames(data)
# Read group information
grupo_control <- readLines(nombre_archivo_entrada, n = 1)
group_info <- readLines(nombre_archivo_entrada, n = 2)
group <- unlist(strsplit(group_info, "\t"))[-1:-2]
# Convert non-numeric columns to numeric
data <- as.data.frame(lapply(data, function(x) as.numeric(as.character(x))))
rownames(data) <- filas
# Remove rows with missing values
data <- na.omit(data)
# Prepare the data for analysis
data_matrix <- as.matrix(data)
rownames(data_matrix) <- rownames(data)
colnames(data_matrix) <- colnames(data)
# Create a design matrix
group_factor <- factor(group)
design <- model.matrix(~0 + group_factor)
colnames(design) <- levels(group_factor)
# Define the contrasts for each comparison
group_names <- colnames(design)
group_names <- group_names[group_names != grupo_control]
contrast_list <- list()
for (grupo in group_names) {
contrast_list <- append(contrast_list,paste0(grupo_control," - ",grupo))
}
# Create contrasts using the contrast_list
contrasts_matrix <- makeContrasts(contrasts = contrast_list, levels = design)
# Fit the linear model and obtain the results for each comparison
results_list <- list()
for (group in group_names) {
fit <- lmFit(data_matrix, design)
fit <- contrasts.fit(fit, contrasts_matrix[, paste0("control - ",group)])
fit <- eBayes(fit)
all_genes_table <- topTable(fit, adjust = "fdr", sort.by = "P", n = Inf)
# Subset the table to include only the gene id, log2foldchange, and p-value
results <- all_genes_table[, c("logFC", "adj.P.Val","t")]
results <- data.frame(geneid = rownames(results), results)
colnames(results) <- c("geneid",
paste0("logFC_",grupo_control,"_vs_",group),
paste0("adj-p-value_",grupo_control,"_vs_",group),
paste0("t_",grupo_control,"_vs_",group))
results_list[[group]] <- results
}
# Combine the results into a single table
combined_results <- Reduce(function(x, y) merge(x, y, by = "geneid"), results_list)
write.table(combined_results, file = nombre_archivo_salida,
row.names = FALSE, sep = "\t", quote = FALSE)
