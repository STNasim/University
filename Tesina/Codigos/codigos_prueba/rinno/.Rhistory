library(RInno)
R.version.string
BiocManager::install(c("limma"), dependencies=TRUE)
BiocManager::install(c("limma"), dependencies=TRUE)
library(RInno)
create_app(
app_name = "limma",
app_dir = "/limma",
pkgs = c("limma"),
script = "your_script.R",
include_R = TRUE
)
trace(get_R,edit=T)
create_app(
app_name = "limma",
app_dir = "/limma",
pkgs = c("limma"),
script = "your_script.R",
include_R = TRUE
)
create_app(
app_name = "limma",
app_dir = "/limma",
pkgs = c("limma"),
script = "your_script.R",
include_R = TRUE
)
trace(get_R,edit=T)
create_app(
app_name = "limma",
app_dir = "/limma",
pkgs = c("limma"),
script = "your_script.R",
include_R = TRUE
)
trace(get_R,edit=T)
trace(RInno::code_section,edit=T)
create_app(
app_name = "limma",
app_dir = "/limma",
pkgs = c("limma"),
script = "your_script.R",
include_R = TRUE
)
trace(RInno::code_section,edit=T)
trace(get_R,edit=T)
create_app(
app_name = "limma",
app_dir = "/limma",
pkgs = c("limma"),
script = "your_script.R",
include_R = TRUE
)
library(RInno)
create_app(
app_name = "limma",
app_dir = "/limma",
pkgs = c("limma"),
script = "limma_script.R",
include_R = TRUE
)
trace(get_R,edit=T)
create_app(
app_name = "limma",
app_dir = "/limma",
pkgs = c("limma"),
script = "limma_script.R",
include_R = TRUE
)
trace(get_R,edit=T)
trace(get_R,edit=T)
create_app(
app_name = "limma",
app_dir = "/limma",
pkgs = c("limma"),
script = "limma_script.R",
include_R = TRUE
)
library(RInno)
create_app(
app_name = "limma",
app_dir = "limma",
pkgs = c("BiocManager"),
script = "limma_script.R",
include_R = TRUE,
R_version = "4.1.3"
)
trace(get_R,edit=T)
readLines("https://cran.rstudio.com/bin/windows/base/",
warn = F) %>% stringr::str_extract("[1-3]\\.[0-9]+\\.[0-9]+") %>%
stats::na.omit() %>% unique()
readLines("https://cran.rstudio.com/bin/windows/base/",
warn = F) %>% stringr::str_extract("[1-4]\\.[0-9]+\\.[0-9]+") %>%
stats::na.omit() %>% unique()
trace(get_R,edit=T)
create_app(
app_name = "limma",
app_dir = "limma",
pkgs = c("BiocManager"),
script = "limma_script.R",
include_R = TRUE,
R_version = "4.1.3"
)
trace(get_R,edit=T)
create_app(
app_name = "limma",
app_dir = "limma",
pkgs = c("BiocManager"),
script = "limma_script.R",
include_R = TRUE,
R_version = "4.1.3"
)
trace(get_R,edit=T)
create_app(
app_name = "limma",
app_dir = "limma",
pkgs = c("BiocManager"),
script = "limma_script.R",
include_R = TRUE,
R_version = "4.1.3"
)
trace(get_R,edit=T)
create_app(
app_name = "limma",
app_dir = "limma",
pkgs = c("BiocManager"),
script = "limma_script.R",
include_R = TRUE,
R_version = "4.1.3"
)
create_app(
app_name = "limma",
app_dir = "limma",
pkgs = c("BiocManager"),
script = "limma_script.R",
include_R = TRUE,
R_version = "4.1.3"
)
trace(get_R,edit=T)
create_app(
app_name = "limma",
app_dir = "limma",
pkgs = c("BiocManager"),
script = "limma_script.R",
include_R = TRUE,
R_version = "4.1.3"
)
create_app(
app_name = "limma",
app_dir = "limma",
pkgs = c("BiocManager"),
script = "limma_script.R",
include_R = TRUE,
R_version = "4.3.1"
)
create_app(
app_name = "limma",
app_dir = "limma",
pkgs = c("BiocManager"),
script = "limma_script.R",
include_R = TRUE,
R_version = "4.3.1"
)
install_inno()
warnings
warnings()
create_app(
app_name = "limma",
app_dir = "limma",
pkgs = c("BiocManager"),
script = "limma_script.R",
include_R = TRUE,
R_version = "4.3.1"
)
trace(RInno::code_section,edit=T)
create_app(
app_name = "limma",
app_dir = "limma",
pkgs = c("BiocManager"),
script = "limma_script.R",
include_R = TRUE,
R_version = "4.3.1"
)
install_inno()
warnings()
#install_inno()
compile_iss()
if (!"BiocManager" %in% rownames(installed.packages()))
install.packages("BiocManager")
BiocManager::install(c("limma"), dependencies=TRUE)
library("limma")
rm(list =ls())
gc()
nombre_archivo = "genes.tsv"
# Read data
data <- read.table(nombre_archivo, header = TRUE, row.names = 1, sep = "\t", check.names = FALSE, skip = 2)
filas <- rownames(data)
# Read group information
grupo_control <- readLines(nombre_archivo, n = 1)
group_info <- readLines(nombre_archivo, n = 2)
group <- unlist(strsplit(group_info, "\t"))[-1:-2]
setwd("G:/Mi unidad/Facultad/Tesina/Tesina Salim Nasim (compartida)/Prototipo funcional/prototipo_codigo")
dirname()
dirname(file.path())
file.path()
script_path <- dirname(rstudioapi::getActiveDocumentContext()$path)
sys.frame(1)$ofile
print(utils::getSrcDirectory(function(){}))
rstudioapi::getActiveDocumentContext
library(rstudioapi)
dirname(parent.frame(2)$ofile)
library("rstudioapi")
install.packages("rstudioapi")
library("rstudioapi")
library(rstudioapi)
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
dirname(getActiveDocumentContext()$path)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
rm(list =ls())
gc()
library(RInno)
create_app(
app_name = "limma",
app_dir = "limma",
pkgs = c("BiocManager","rstudioapi"),
script = "limma_script.R",
include_R = TRUE,
R_version = "4.3.1"
)
create_app(
app_name = "limma",
app_dir = "limma",
pkgs = c("BiocManager","rstudioapi"),
script = "limma_script.R",
include_R = TRUE,
R_version = "4.3.1"
)
getwd()
setwd("F:/prueba_limma")
create_app(
app_name = "limma",
app_dir = "limma",
pkgs = c("BiocManager","rstudioapi"),
script = "limma_script.R",
include_R = TRUE,
R_version = "4.3.1"
)
#install_inno()
compile_iss()
if (!"rstudioapi" %in% rownames(installed.packages()))
install.packages("rstudioapi")
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
gc()
nombre_archivo = "genes.tsv"
library(shiny)
#APP PRUEBA SHINY
create_app(
app_name = "shiny_prueba",
app_dir = "F:/shiny_prueba",
pkgs = c("shiny"),
script = "shiny_prueba.R",
include_R = TRUE,
R_version = "4.3.1"
)
#APP PRUEBA SHINY
create_app(
app_name = "shiny_prueba",
app_dir = "F:/shiny_prueba",
pkgs = c("shiny"),
script = "shiny_prueba.R",
include_R = TRUE,
R_version = "4.3.1"
)
#install_inno()
compile_iss()
library(shiny)
ui <- fluidPage(
textOutput("workingDirectory")
)
server <- function(input, output) {
output$workingDirectory <- renderText({
getwd()
})
}
shinyApp(ui, server)
library (rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#APP PRUEBA SHINY
create_app(
app_name = "shiny_prueba",
app_dir = "F:/shiny_prueba",
pkgs = c("shiny","rstudioapi"),
script = "shiny_prueba.R",
include_R = TRUE,
R_version = "4.3.1"
)
#install_inno()
compile_iss()
#install_inno()
compile_iss()
#APP PRUEBA SHINY
create_app(
app_name = "shiny_prueba",
app_dir = "F:/shiny_prueba",
pkgs = c("shiny","rstudioapi"),
script = "shiny_prueba.R",
include_R = TRUE,
R_version = "4.3.1"
)
#install_inno()
compile_iss()
library(shiny)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
ui <- fluidPage(
textOutput("workingDirectory")
)
server <- function(input, output) {
output$workingDirectory <- renderText({
getwd()
})
}
shinyApp(ui, server)
write.table(c(1,2,3,4), file = "resultados.tsv", row.names = FALSE, sep = "\t", quote = FALSE)
#APP PRUEBA SHINY
create_app(
app_name = "shiny_prueba",
app_dir = "F:/shiny_prueba",
pkgs = c("shiny","rstudioapi"),
script = "shiny_prueba.R",
include_R = TRUE,
R_version = "4.3.1"
)
#install_inno()
compile_iss()
rm(list =ls())
gc()
library(RInno)
#APP LIMMA
create_app(
app_name = "limma",
app_dir = "limma",
pkgs = c("BiocManager","rstudioapi"),
script = "limma_script.R",
include_R = TRUE,
R_version = "4.3.1"
)
#APP PRUEBA SHINY
create_app(
app_name = "shiny_prueba",
app_dir = "F:/shiny_prueba",
pkgs = c("shiny","rstudioapi"),
script = "shiny_prueba.R",
include_R = TRUE,
R_version = "4.3.1"
)
#install_inno()
compile_iss()
