# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ventana_principal.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QInputDialog, QTableWidgetItem, QApplication
import pandas as pd

from ui_selector_de_filtros import Ui_SelectorFiltros
from ui_conversor import Ui_Conversor
from ui_selector_de_graficos import Ui_SelectorGraficos

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(689, 405)
        MainWindow.setWindowTitle("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.procesamiento_de_muestras = QtWidgets.QWidget()
        self.procesamiento_de_muestras.setObjectName("procesamiento_de_muestras")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.procesamiento_de_muestras)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.but_convertir_muestras = QtWidgets.QPushButton(self.procesamiento_de_muestras)
        self.but_convertir_muestras.setObjectName("but_convertir_muestras")
        self.verticalLayout_3.addWidget(self.but_convertir_muestras)
        self.but_cargar_muestras = QtWidgets.QPushButton(self.procesamiento_de_muestras)
        self.but_cargar_muestras.setObjectName("but_cargar_muestras")
        self.verticalLayout_3.addWidget(self.but_cargar_muestras)
        self.but_guardar_muestras = QtWidgets.QPushButton(self.procesamiento_de_muestras)
        self.but_guardar_muestras.setEnabled(False)
        self.but_guardar_muestras.setObjectName("but_guardar_muestras")
        self.verticalLayout_3.addWidget(self.but_guardar_muestras)
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        self.tabla_muestras = QtWidgets.QTableWidget(self.procesamiento_de_muestras)
        self.tabla_muestras.setEnabled(False)
        self.tabla_muestras.setRowCount(0)
        self.tabla_muestras.setObjectName("tabla_muestras")
        self.tabla_muestras.setColumnCount(0)
        self.horizontalLayout.addWidget(self.tabla_muestras)
        self.tabWidget.addTab(self.procesamiento_de_muestras, "")
        self.procesamiento_de_sondas = QtWidgets.QWidget()
        self.procesamiento_de_sondas.setObjectName("procesamiento_de_sondas")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.procesamiento_de_sondas)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.but_cargar_sondas = QtWidgets.QPushButton(self.procesamiento_de_sondas)
        self.but_cargar_sondas.setObjectName("but_cargar_sondas")
        self.verticalLayout_4.addWidget(self.but_cargar_sondas)
        self.but_aplicar_filtros = QtWidgets.QPushButton(self.procesamiento_de_sondas)
        self.but_aplicar_filtros.setEnabled(False)
        self.but_aplicar_filtros.setObjectName("but_aplicar_filtros")
        self.verticalLayout_4.addWidget(self.but_aplicar_filtros)
        self.but_mapear_sondas = QtWidgets.QPushButton(self.procesamiento_de_sondas)
        self.but_mapear_sondas.setObjectName(u"but_mapear_sondas")
        self.but_mapear_sondas.setEnabled(False)
        self.verticalLayout_4.addWidget(self.but_mapear_sondas)
        self.but_guardar_sondas = QtWidgets.QPushButton(self.procesamiento_de_sondas)
        self.but_guardar_sondas.setEnabled(False)
        self.but_guardar_sondas.setObjectName("but_guardar_sondas")
        self.verticalLayout_4.addWidget(self.but_guardar_sondas)
        self.horizontalLayout_2.addLayout(self.verticalLayout_4)
        self.tabla_sondas = QtWidgets.QTableWidget(self.procesamiento_de_sondas)
        self.tabla_sondas.setEnabled(False)
        self.tabla_sondas.setRowCount(0)
        self.tabla_sondas.setObjectName("tabla_sondas")
        self.tabla_sondas.setColumnCount(0)
        self.horizontalLayout_2.addWidget(self.tabla_sondas)
        self.tabWidget.addTab(self.procesamiento_de_sondas, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.tab_3)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.but_cargar_resultados = QtWidgets.QPushButton(self.tab_3)
        self.but_cargar_resultados.setObjectName("but_cargar_resultados")
        self.verticalLayout_6.addWidget(self.but_cargar_resultados)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label_via = QtWidgets.QLabel(self.tab_3)
        self.label_via.setEnabled(False)
        self.label_via.setObjectName("label_via")
        self.gridLayout.addWidget(self.label_via, 1, 0, 1, 1)
        self.label_gen = QtWidgets.QLabel(self.tab_3)
        self.label_gen.setEnabled(False)
        self.label_gen.setObjectName("label_gen")
        self.gridLayout.addWidget(self.label_gen, 0, 0, 1, 1)
        self.combox_gen = QtWidgets.QComboBox(self.tab_3)
        self.combox_gen.setEnabled(False)
        self.combox_gen.setObjectName("combox_gen")
        self.combox_gen.addItem("")
        self.gridLayout.addWidget(self.combox_gen, 0, 1, 1, 1)
        self.combox_via = QtWidgets.QComboBox(self.tab_3)
        self.combox_via.setEnabled(False)
        self.combox_via.setObjectName("combox_via")
        self.combox_via.addItem("")
        self.gridLayout.addWidget(self.combox_via, 1, 1, 1, 1)
        self.verticalLayout_6.addLayout(self.gridLayout)
        self.but_graficar = QtWidgets.QPushButton(self.tab_3)
        self.but_graficar.setEnabled(False)
        self.but_graficar.setObjectName("but_graficar")
        self.verticalLayout_6.addWidget(self.but_graficar)
        self.horizontalLayout_3.addLayout(self.verticalLayout_6)
        self.tabla_resultados = QtWidgets.QTableWidget(self.tab_3)
        self.tabla_resultados.setEnabled(False)
        self.tabla_resultados.setRowCount(0)
        self.tabla_resultados.setColumnCount(0)
        self.tabla_resultados.setObjectName("tabla_resultados")
        self.horizontalLayout_3.addWidget(self.tabla_resultados)
        self.tabWidget.addTab(self.tab_3, "")
        self.verticalLayout_5.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setEnabled(True)
        self.statusBar.setAutoFillBackground(False)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self._conectar_seniales()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(QtCore.QCoreApplication.translate("MainWindow", u"Software", None))
        self.but_convertir_muestras.setText(_translate("MainWindow", "Convertir\n"
" muestras"))
        self.but_cargar_muestras.setText(_translate("MainWindow", "Cargar\n"
" muestras"))
        self.but_guardar_muestras.setText(_translate("MainWindow", "Guardar\n"
" muestras"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.procesamiento_de_muestras), _translate("MainWindow", "Procesamiento de muestras"))
        self.but_cargar_sondas.setText(_translate("MainWindow", "Cargar\n"
" sondas"))
        self.but_aplicar_filtros.setText(_translate("MainWindow", "Aplicar\n"
" filtros"))
        self.but_mapear_sondas.setText(_translate("MainWindow", "Mapear\n"
"sondas"))
        self.but_guardar_sondas.setText(_translate("MainWindow", "Guardar\n"
" sondas"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.procesamiento_de_sondas), _translate("MainWindow", "Procesamiento de sondas"))
        self.but_cargar_resultados.setText(_translate("MainWindow", "Cargar\n"
" resultados"))
        self.label_via.setText(_translate("MainWindow", "Vía"))
        self.label_gen.setText(_translate("MainWindow", "Gen"))
        self.combox_gen.setItemText(0, _translate("MainWindow", "Todos"))
        self.combox_via.setItemText(0, _translate("MainWindow", "Todos"))
        self.but_graficar.setText(_translate("MainWindow", "Graficar"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Procesamiento de resultados y graficación"))

    def _conectar_seniales(self):
        #Muestras
        self.but_cargar_muestras.clicked.connect(self._cargar_muestras)
        self.but_guardar_muestras.clicked.connect(self._guardar_muestras)
        self.but_convertir_muestras.clicked.connect(self._abrir_conversor_muestras)
        self.tabla_muestras.keyPressEvent = lambda event: self._eventos_tecla_tablas(event, self.tabla_muestras)
                
        #Sondas
        self.tabla_sondas.keyPressEvent = lambda event: self._eventos_tecla_tablas(event, self.tabla_sondas)
        self.but_cargar_sondas.clicked.connect(self._cargar_sondas)
        self.but_aplicar_filtros.clicked.connect(self._aplicar_filtros)
        self.but_mapear_sondas.clicked.connect(self._mapear_sondas)
        self.but_guardar_sondas.clicked.connect(self._guardar_sondas)

        #Resultados
        self.tabla_resultados.keyPressEvent = lambda event: self._eventos_tecla_tablas(event, self.tabla_resultados)
        self.but_cargar_resultados.clicked.connect(self._cargar_resultados)
        self.but_graficar.clicked.connect(self._abrir_selector_graficos)

    def _abrir_selector_graficos(self):
        SelectorGraficos = QtWidgets.QDialog()
        ui = Ui_SelectorGraficos()
        #Obtener grupos hacer
        grupos = ["Control","Tratamiento"]
        #obtener tipos de gráficos hacer
        tipos_graficos = ["Boxplot","Histograma","Scatterplot"]
        ui.setupUi(SelectorGraficos,grupos,tipos_graficos)
        SelectorGraficos.exec()
        if SelectorGraficos.accepted:
            self.statusBar.showMessage("Graficando...")
            #Verificar parametros etc hacer
            #Graficar hacer
            self.statusBar.showMessage("Graficado")

    def _cargar_resultados(self):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_name, _ = QFileDialog.getOpenFileName(None, "Seleccione el archivo de resultados",
                                                     "", "All Files (*);;Text Files (*.txt)", options=options)
        if file_name:
            
            self.statusBar.showMessage("Cargando resultados...")
            datos_resultados = pd.read_csv(file_name, sep='\t', header=0)
            self.statusBar.showMessage("Resultados cargados")
            #Agregar datos de grupos y vias hacer
            self.tabla_resultados.setRowCount(len(datos_resultados.index))
            self.tabla_resultados.setColumnCount(len(datos_resultados.columns))
            for i in range(len(datos_resultados.index)):
                for j in range(len(datos_resultados.columns)):
                    self.tabla_resultados.setItem(i, j, QtWidgets.QTableWidgetItem(str(datos_resultados.iloc[i, j])))

            self.tabla_resultados.setHorizontalHeaderLabels(datos_resultados.columns)
            self.tabla_resultados.setVerticalHeaderLabels([str(i) for i in datos_resultados.index.tolist()])
            self.tabla_resultados.resizeColumnsToContents()

            self.statusBar.showMessage("Resultados cargados")
            self.but_graficar.setEnabled(True)
            self.combox_gen.setEnabled(True)
            self.combox_via.setEnabled(True)
            self.label_gen.setEnabled(True)
            self.label_via.setEnabled(True)
            self.tabla_resultados.setEnabled(True)

    def _guardar_sondas(self):
        self.statusBar.showMessage("Guardando sondas...")
        #Guardar las sondas en un archivo hacer
        self.statusBar.showMessage("Sondas guardadas con nombre")
        pass

    def _mapear_sondas(self):
        self.statusBar.showMessage("Mapeando sondas...")
        #Mapear las sondas hacer
        self.statusBar.showMessage("Sondas mapeadas")
        self.but_guardar_sondas.setEnabled(True)
        pass

    def _aplicar_filtros(self):
        SelectorFiltros = QtWidgets.QDialog()
        ui_selector = Ui_SelectorFiltros()
        ui_selector.setupUi(SelectorFiltros)
        SelectorFiltros.exec()
        if SelectorFiltros.accepted:
            self.statusBar.showMessage("Aplicando filtros...")
            #Aplicar filtros hacer
            self.statusBar.showMessage("Filtros aplicados")

    def _cargar_sondas(self):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_names, _ = QFileDialog.getOpenFileNames(None, "Seleccione los archivos de sondas",
                                                     "", "All Files (*);;Text Files (*.txt)", options=options)
        if file_names:
            self.statusBar.showMessage("Cargando sondas...")
            datos_sondas = pd.DataFrame()

            for file_name in file_names:
                lectura = pd.read_csv(file_name, sep='\t', header=0)
                datos_sondas = pd.concat([datos_sondas, lectura])
                QApplication.processEvents()

            self.tabla_sondas.setRowCount(len(datos_sondas.index))
            self.tabla_sondas.setColumnCount(len(datos_sondas.columns))
            for i in range(len(datos_sondas.index)):
                for j in range(len(datos_sondas.columns)):
                    self.tabla_sondas.setItem(i, j, QtWidgets.QTableWidgetItem(str(datos_sondas.iloc[i, j])))

            self.tabla_sondas.setHorizontalHeaderLabels(datos_sondas.columns)
            self.tabla_sondas.setVerticalHeaderLabels([str(i) for i in datos_sondas.index.tolist()])
            self.tabla_sondas.resizeColumnsToContents()

            self.statusBar.showMessage("Sondas cargadas")

            self.but_guardar_sondas.setEnabled(False)
            self.but_aplicar_filtros.setEnabled(True)
            self.but_mapear_sondas.setEnabled(True)
            self.tabla_sondas.setEnabled(True)

    def _eventos_tecla_tablas(self, event, table):
        if event.key() == QtCore.Qt.Key_Backspace or event.key() == QtCore.Qt.Key_Delete:
            rows = set()
            for item in table.selectedItems():
                rows.add(item.row())
            for row in sorted(rows, reverse=True):
                table.removeRow(row)

        elif event.key() == QtCore.Qt.Key_Right or event.key() == QtCore.Qt.Key_D:
            self._mover_tabla_derecha(table)

        elif event.key() == QtCore.Qt.Key_Left or event.key() == QtCore.Qt.Key_A:
            self._mover_tabla_izquierda(table)

        elif event.key() == QtCore.Qt.Key_Return:
            self._reemplazar_valores(table)

    def _reemplazar_valores(self, table):
        indices = table.selectedIndexes()
        text, ok = QInputDialog.getText(MainWindow, "Replace", "Enter new value:")
        if ok:
            for index in indices:
                item = table.item(index.row(), index.column())
                if item is None:
                    item = QTableWidgetItem(text)
                    table.setItem(index.row(), index.column(), item)
                else:
                    item.setText(text)

    def _mover_tabla_derecha(self, table):
        selected_cols = set()
        for item in table.selectedItems():
            selected_cols.add(item.column())
        selected_items = table.selectedItems()
        for col in sorted(selected_cols, reverse=True):
            if col < table.columnCount() - 1:
                header_item = table.horizontalHeaderItem(col).clone()
                table.setHorizontalHeaderItem(col, table.horizontalHeaderItem(col + 1).clone())
                table.setHorizontalHeaderItem(col + 1, header_item)
                for row in range(table.rowCount()):
                    item = table.takeItem(row, col)
                    table.setItem(row, col, table.takeItem(row, col + 1))
                    table.setItem(row, col + 1, item)
        table.clearSelection()
        for item in selected_items:
            item.setSelected(True)
        table.resizeColumnsToContents()

    def _mover_tabla_izquierda(self, table):
        selected_cols = set()
        for item in table.selectedItems():
            selected_cols.add(item.column())
        selected_items = table.selectedItems()
        for col in sorted(selected_cols):
            if col > 0:
                header_item = table.horizontalHeaderItem(col).clone()
                table.setHorizontalHeaderItem(col, table.horizontalHeaderItem(col - 1).clone())
                table.setHorizontalHeaderItem(col - 1, header_item)
                for row in range(table.rowCount()):
                    item = table.takeItem(row, col)
                    table.setItem(row, col, table.takeItem(row, col - 1))
                    table.setItem(row, col - 1, item)
        table.clearSelection()
        for item in selected_items:
            item.setSelected(True)
        table.resizeColumnsToContents()

    def _abrir_conversor_muestras(self):
        self.conversor = QtWidgets.QDialog()
        self.ui_conversor = Ui_Conversor()
        self.ui_conversor.setupUi(self.conversor)
        self.conversor.show()
        self.statusBar.showMessage("Conversor abierto")

    def _guardar_muestras(self):
        #Avisar si hay sin agrupar hacer
        text, ok = QInputDialog.getText(MainWindow, "Varianza de aviso", "Valor:")
        if ok:
            #Agrupar y guardar hacer
            self.statusBar.showMessage("Muestras guardadas con nombre")
    
    def _es_muestra_estandar(self, file_name):
        #Validar que el archivo sea una muestra estandar hacer
        return True

    def _cargar_muestras(self):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_names, _ = QFileDialog.getOpenFileNames(None, "Seleccione uno o mas archivos",
                                                     "", "All Files (*);;Text Files (*.txt)", options=options)
        if file_names:
            self.statusBar.showMessage("Cargando muestras...")
            datos_muestras = pd.DataFrame()

            for file_name in file_names:
                if self._es_muestra_estandar(file_name):
                    lectura = pd.read_csv(file_name, sep='\t', header=0)
                    datos_muestras = pd.concat([datos_muestras, lectura])
                    QApplication.processEvents()
                else:
                    pass#avisar error hacer

            self.tabla_muestras.setRowCount(len(datos_muestras.index))
            self.tabla_muestras.setColumnCount(len(datos_muestras.columns))
            for i in range(len(datos_muestras.index)):
                for j in range(len(datos_muestras.columns)):
                    self.tabla_muestras.setItem(i, j, QtWidgets.QTableWidgetItem(str(datos_muestras.iloc[i, j])))

            self.tabla_muestras.setHorizontalHeaderLabels(datos_muestras.columns)
            self.tabla_muestras.setVerticalHeaderLabels([str(i) for i in datos_muestras.index.tolist()])
            #add a column to select groups
            self.tabla_muestras.insertColumn(0)
            self.tabla_muestras.setHorizontalHeaderItem(0, QtWidgets.QTableWidgetItem("Grupo"))
            self.tabla_muestras.resizeColumnsToContents()
            self.tabla_muestras.resizeRowsToContents()
            
            self.statusBar.showMessage("Muestras cargadas")
            self.but_guardar_muestras.setEnabled(True)
            self.tabla_muestras.setEnabled(True)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
