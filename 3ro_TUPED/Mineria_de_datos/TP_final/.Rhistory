# Calculate the percentage of the total number of rows in the dataframe that belong to the top 10 values
top_10_percentage <- (sum(top_10$n) / nrow(datos)) * 100
# Create a new dataframe for the pie chart
pie_data <- data.frame(
category = c("Top 10", "Others"),
percentage = c(top_10_percentage, other_percentage)
)
# Create a pie chart to visualize the percentage distribution
ggplot(pie_data, aes(x = "", y = percentage, fill = category)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
theme(legend.position = "right") +
labs(title = "Percentage of Rows Belonging to Top 10 Values", x = NULL, y = NULL, fill = "Category")
# Create a pie chart to visualize the percentage distribution
ggplot(pie_data, aes(x = "", y = percentage, fill = category)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
theme(legend.position = "right") +
labs(title = "Percentage of Rows Belonging to Top 10 Values", x = NULL, y = NULL, fill = "Category") +
ggtitle("Distribución de datos con cantidad 50") +
labs(fill= "") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5),
color = "white", size = 4)
# Create a pie chart to visualize the percentage distribution
ggplot(pie_data, aes(x = "", y = percentage, fill = category)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
theme(legend.position = "right") +
labs(title = "Percentage of Rows Belonging to Top 10 Values", x = NULL, y = NULL, fill = "Category") +
ggtitle("Distribución de items pertenecientes al top 10 más comprado") +
labs(fill= "") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5),
color = "white", size = 4)
# Create a new dataframe for the pie chart
pie_data <- data.frame(
category = c("Top 10", "Otros"),
percentage = c(top_10_percentage, other_percentage)
)
# Create a pie chart to visualize the percentage distribution
ggplot(pie_data, aes(x = "", y = percentage, fill = category)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
theme(legend.position = "right") +
labs(title = "Percentage of Rows Belonging to Top 10 Values", x = NULL, y = NULL, fill = "Category") +
ggtitle("Distribución de items pertenecientes al top 10 más comprado") +
labs(fill= "") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5),
color = "white", size = 4)
hist(datos_aux$Price, main = "Histograma de Price",
xlab = "Precio", ylab = "Frecuencia")
#Se ve que los valores son muy dispersos, asi que se hace un "zoom" imputando valores muy grandes
datos_aux <- datos
datos_aux$Price <- ifelse(datos_aux$Price > 50,NA, datos_aux$Price)
hist(datos_aux$Price, main = "Histograma de Price",
xlab = "Precio", ylab = "Frecuencia")
below_threshold <- datos %>% filter(Price < 50) %>% nrow()
total_values <- nrow(datos)
percentage_below <- (below_threshold / total_values) * 100
percentage_above <- 100 - percentage_below
percentages <- data.frame(
category = c("Debajo", "Igual o encima"),
percentage = c(percentage_below, percentage_above)
)
ggplot(percentages, aes(x = "", y = percentage, fill = category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
ggtitle("Distribución de datos con cantidad 50") +
labs(fill= "") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5),
color = "white", size = 4)
below_threshold <- datos %>% filter(Price < 50) %>% nrow()
total_values <- nrow(datos)
percentage_below <- (below_threshold / total_values) * 100
percentage_above <- 100 - percentage_below
percentages <- data.frame(
category = c("Debajo", "Igual o encima"),
percentage = c(percentage_below, percentage_above)
)
ggplot(percentages, aes(x = "", y = percentage, fill = category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
ggtitle("Distribución de datos con cantidad 50") +
labs(fill= "") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5),
color = "white", size = 4)
head(sort(datos$Price, decreasing = TRUE),10)
head(sort(datos$Price, decreasing = TRUE),100)
below_threshold <- datos %>% filter(Price < 50) %>% nrow()
total_values <- nrow(datos)
percentage_below <- (below_threshold / total_values) * 100
percentage_above <- 100 - percentage_below
percentages <- data.frame(
category = c("Debajo", "Igual o encima"),
percentage = c(percentage_below, percentage_above)
)
ggplot(percentages, aes(x = "", y = percentage, fill = category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
ggtitle("Distribución de datos con cantidad 50") +
labs(fill= "") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5),
color = "white", size = 4)
ggplot(percentages, aes(x = "", y = percentage, fill = category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
ggtitle("Distribución de datos con cantidad 50") +
labs(fill= "") +
geom_text(aes(label = paste0(round(percentage, 3), "%")),
position = position_stack(vjust = 0.5),
color = "white", size = 4)
percentage_above <- 100 - percentage_below
below_threshold <- datos %>% filter(Price < 20) %>% nrow()
total_values <- nrow(datos)
percentage_below <- (below_threshold / total_values) * 100
percentage_above <- 100 - percentage_below
percentages <- data.frame(
category = c("Debajo", "Igual o encima"),
percentage = c(percentage_below, percentage_above)
)
ggplot(percentages, aes(x = "", y = percentage, fill = category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
ggtitle("Distribución de datos con cantidad 20") +
labs(fill= "") +
geom_text(aes(label = paste0(round(percentage, 3), "%")),
position = position_stack(vjust = 0.5),
color = "white", size = 4)
ggplot(percentages, aes(x = "", y = percentage, fill = category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
ggtitle("Distribución de datos con cantidad 20") +
labs(fill= "") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5),
color = "white", size = 4)
head(sort(datos$Price, decreasing = TRUE),100)
datos$CustomerID <- as.factor(datos$CustomerID)
hist(table(datos$CustomerID), main = "Histograma de CustomerID", breaks = 50,
xlab = "Compras diferentes por cliente", ylab = "Numero de items")
#Haciendo zoom a los valores menores a 500
tabla_aux <- table(datos$CustomerID)
tabla_filtrada <- tabla_aux[tabla_aux < 500]
hist(tabla_filtrada,
main = "Histograma de CustomerID",
xlab = "Compras diferentes por cliente",
ylab = "Numero de items",
breaks = 50)
head(tabla_filtrada,30)
hist(tabla_filtrada,
main = "Histograma de CustomerID",
xlab = "Compras diferentes por cliente",
ylab = "Numero de clientes",
breaks = 50)
hist(table(datos$CustomerID), main = "Histograma de CustomerID", breaks = 50,
xlab = "Compras diferentes por cliente", ylab = "Numero de clientes")
#Haciendo zoom a los valores menores a 500
tabla_aux <- table(datos$CustomerID)
tabla_filtrada <- tabla_aux[tabla_aux < 500]
hist(tabla_filtrada,
main = "Histograma de CustomerID",
xlab = "Compras diferentes por cliente",
ylab = "Numero de clientes",
breaks = 50)
sort(table(datos$CustomerID), decreasing = TRUE)
# Count the frequency of each unique value in the 'CustomerID' column
frequency <- datos %>% count(CustomerID)
# Sort the frequencies in descending order and select the top 10
top_10 <- frequency %>% arrange(desc(n)) %>% head(10)
# Calculate the percentage of the total number of rows in the dataframe that belong to the top 10 values
top_10$percentage <- (sum(top_10$n) / nrow(datos)) * 100
other_percentage <- 100 - top_10$percentage
# Create a new dataframe for the pie chart
pie_data <- data.frame(
category = c("Top 10", "Others"),
percentage = c(top_10$percentage, other_percentage)
)
# Create a pie chart to visualize the percentage distribution
ggplot(pie_data, aes(x = "", y = percentage, fill = category)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
theme(legend.position = "right") +
labs(title = "Percentage of Rows Belonging to Top 10 CustomerIDs", x = NULL, y = NULL, fill = "Category")
# Calculate the percentage of the total number of rows in the dataframe that belong to the top 10 values
top_10_percentage <- (sum(top_10$n) / nrow(datos)) * 100
other_percentage <- 100 - top_10$percentage
# Create a new dataframe for the pie chart
pie_data <- data.frame(
category = c("Top 10", "Others"),
percentage = c(top_10$percentage, other_percentage)
)
# Create a pie chart to visualize the percentage distribution
ggplot(pie_data, aes(x = "", y = percentage, fill = category)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
theme(legend.position = "right") +
labs(title = "Percentage of Rows Belonging to Top 10 CustomerIDs", x = NULL, y = NULL, fill = "Category")
# Calculate the percentage of the total number of rows in the dataframe that belong to the top 10 values
top_10_percentage <- (sum(top_10$n) / nrow(datos)) * 100
other_percentage <- 100 - top_10_percentage
# Create a new dataframe for the pie chart
pie_data <- data.frame(
category = c("Top 10", "Others"),
percentage = c(top_10_percentage, other_percentage)
)
# Create a pie chart to visualize the percentage distribution
ggplot(pie_data, aes(x = "", y = percentage, fill = category)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
theme(legend.position = "right") +
labs(title = "Percentage of Rows Belonging to Top 10 CustomerIDs", x = NULL, y = NULL, fill = "Category")
View(frequency)
# Count the frequency of each unique value in the 'CustomerID' column
frequency <- datos %>% count(CustomerID)
# Sort the frequencies in descending order and select the top 10
top_10 <- frequency %>% arrange(desc(n)) %>% head(10)
# Calculate the percentage of the total number of rows in the dataframe that belong to the top 10 values
top_10_percentage <- (sum(top_10$n) / nrow(datos)) * 100
other_percentage <- 100 - top_10_percentage
# Create a new dataframe for the pie chart
pie_data <- data.frame(
category = c("Top 10", "Others"),
percentage = c(top_10_percentage, other_percentage)
)
View(percentages)
# Create a pie chart to visualize the percentage distribution
ggplot(pie_data, aes(x = "", y = percentage, fill = category)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
theme(legend.position = "right") +
labs(title = "Percentage of Rows Belonging to Top 10 CustomerIDs", x = NULL, y = NULL, fill = "Category")
# Create a pie chart to visualize the percentage distribution
ggplot(pie_data, aes(x = "", y = percentage, fill = category)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
theme(legend.position = "right") +
labs(title = "Porcentaje de ventas pertenecientes al Top 10", x = NULL, y = NULL, fill = "Category")
# Create a pie chart to visualize the percentage distribution
ggplot(pie_data, aes(x = "", y = percentage, fill = category)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
theme(legend.position = "right") +
labs(title = "Porcentaje de ventas pertenecientes al Top 10", x = NULL, y = NULL, fill = "Category") +
labs(fill = "")
View(top_10)
datos$Country <- as.factor(datos$Country)
par(mar = c(10, 8, 4, 2))
barplot(table(datos$Country), main = "Grafico de Country", las = 2)
title(xlab = "Pais", line = 6)
title(ylab = "Compras", line = 5)
summary(datos)
# Count the frequency of each unique value in the 'Itemname' column
frequency <- datos %>% count(Itemname)
View(frequency)
# Count the frequency of each unique value in the 'Itemname' column
frequency <- datos %>% distinct(Itemname,BillNo) %>%count(Itemname)
# Sort the frequencies in descending order and select the top 10
top_10 <- frequency %>% arrange(desc(n)) %>% head(10)
# Calculate the percentage of the total number of rows in the dataframe that belong to the top 10 values
top_10_percentage <- (sum(top_10$n) / nrow(datos)) * 100
other_percentage <- unique(100 - top_10$percentage)
# Create a new dataframe for the pie chart
pie_data <- data.frame(
category = c("Top 10", "Otros"),
percentage = c(top_10_percentage, other_percentage)
)
# Create a pie chart to visualize the percentage distribution
ggplot(pie_data, aes(x = "", y = percentage, fill = category)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
theme(legend.position = "right") +
labs(title = "Percentage of Rows Belonging to Top 10 Values", x = NULL, y = NULL, fill = "Category") +
ggtitle("Distribución de items pertenecientes al top 10 más comprado") +
labs(fill= "") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5),
color = "white", size = 4)
View(frequency)
View(top_10)
# Calculate the percentage of the total number of rows in the dataframe that belong to the top 10 values
top_10_percentage <- (sum(top_10$n) / nrow(datos)) * 100
other_percentage <- unique(100 - top_10_percentage)
# Create a new dataframe for the pie chart
pie_data <- data.frame(
category = c("Top 10", "Otros"),
percentage = c(top_10_percentage, other_percentage)
)
# Create a pie chart to visualize the percentage distribution
ggplot(pie_data, aes(x = "", y = percentage, fill = category)) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start = 0) +
theme_void() +
theme(legend.position = "right") +
labs(title = "Percentage of Rows Belonging to Top 10 Values", x = NULL, y = NULL, fill = "Category") +
ggtitle("Distribución de items pertenecientes al top 10 más comprado") +
labs(fill= "") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5),
color = "white", size = 4)
View(top_10)
top_10$percentage <- top10$n/total_values
View(top_10)
top_10$percentage <- top10$n/total_values
top_10$percentage <- top10$n/total_values
top_10
top_10$percentage <- top10$n/total_values
top_10$percentage <- top_10$n/total_values
top_10$percentage <- top_10$n/total_values*100
rm(list = ls())
gc()
library(pacman)
p_load(arulesSequences,arules,openxlsx,dplyr,stringr)
datos <- read.xlsx("datos_limpios.xlsx")
datos2 <- na.omit(datos)
datos3 <- datos2 %>%
group_by(CustomerID, BillNo) %>%
summarise(Itemname = list(Itemname)) %>%
mutate(item_id = row_number()) %>%
ungroup() %>%
select(CustomerID, item_id, Itemname)
transactions_list <- datos3 %>%
pull(Itemname)
transacciones <- as(transactions_list, "transactions")
transactionInfo(transacciones) <- data.frame(sequenceID = datos3$CustomerID,
eventID = datos3$item_id)
transacciones
seq <- cspade(transacciones,
parameter = list(support = 0.02),
control = list(verbose=F))
seq
inspect(sort(seq, by = "support", decreasing = TRUE)[1:10])
seq_3 <- cspade(transacciones,
parameter = list(support = 0.03),
control = list(verbose=F))
seq_3
seq_3 <- seq_3[size(seq_3,"items")>1]
seq_3
inspect(sort(seq_3, by = "support", decreasing = TRUE)[1:10])
salida <- as(seq_3, "data.frame") %>% as_tibble()
salida$pattern <- (str_count(salida$sequence, ",") + 1)
salida <- salida[order(-salida$support),]
View(salida)
View(salida)
salida <- as(seq_3, "data.frame") %>% as_tibble()
salida$pattern <- (str_count(salida$sequence, ",") + 1)
salida <- salida[order(-salida$support),]
salida$apariciones <- salida$support*18054
write.csv(x=salida, file="sequencias_3.csv", row.names=FALSE)
salida$apariciones <- round(salida$support*18054)
write.csv(x=salida, file="sequencias_3.csv", row.names=FALSE)
View(salida)
sum(salida$apariciones)
salida$apariciones <- floor(salida$support*18054)
sum(salida$apariciones)
salida$apariciones <- ceiling(salida$support*18054)
sum(salida$apariciones)
salida$apariciones <- round(salida$support*18054)
write.csv(x=salida, file="sequencias_3.csv", row.names=FALSE)
datos3 %>% distinct(Itemname,BillNo)
View(datos3)
datos3 %>% distinct(Itemname,CustomerID)
datos2 %>% distinct(Itemname,BillNo)
count(datos2 %>% distinct(Itemname,BillNo))
View(salida)
View(salida)
salida$apariciones_porcentual <- salida$support*100
write.csv(x=salida, file="sequencias_3.csv", row.names=FALSE)
View(salida)
salida <- salida[-support]
salida <- salida[-"support"]
salida <- mutate(support = NULL)
salida <- salida[,-2]
rm(list = ls())
gc()
library(pacman)
p_load(arules,arulesSequences,openxlsx,dplyr)
datos_crudos <- read.xlsx("datos_limpios.xlsx")
datos_uk <- na.omit(datos_crudos)
datos_uk <- datos_uk[datos_uk$Country == "United Kingdom", ]
table(datos_uk$Country)
#Reemplazar todos los espacios por guion para que sean leidas
#correctamente las transacciones por read_baskets()
datos_uk$Itemname <- gsub(" ", "-", datos_uk$Itemname)
datos3 <- datos_uk %>%
group_by(CustomerID, Date) %>%
summarise(Itemname = list(Itemname)) %>%
mutate(item_id = row_number()) %>%
ungroup() %>%
select(CustomerID, item_id, Itemname)
rm(list = ls())
gc()
transacciones <- read_baskets(con = "datos_basket_uk.txt",
info = c("eventID","sequenceID"))
transacciones
itemsets <- eclat(transacciones,
parameter = list(support = 0.01, minlen = 2),
control = list(verbose=F))
inspect(itemsets)
reglas <- ruleInduction(itemsets, transacciones, confidence = 0.7)
reglas
reglas <- sort(reglas, by = "lift", decreasing = TRUE)
inspect(reglas[1:10])
rm(list = ls())
gc()
library(pacman)
p_load(arulesSequences,arules,openxlsx,dplyr,stringr)
datos <- read.xlsx("datos_limpios.xlsx")
datos2 <- na.omit(datos)
datos3 <- datos2 %>%
group_by(CustomerID, BillNo) %>%
summarise(Itemname = list(Itemname)) %>%
mutate(item_id = row_number()) %>%
ungroup() %>%
select(CustomerID, item_id, Itemname)
transactions_list <- datos3 %>%
pull(Itemname)
transacciones <- as(transactions_list, "transactions")
transactionInfo(transacciones) <- data.frame(sequenceID = datos3$CustomerID,
eventID = datos3$item_id)
transacciones
#Hay un total de 18054 transacciones y 3843 items, lo cual coincide con:
n_distinct(datos2$Itemname)
n_distinct(datos2$BillNo)
inspect(transacciones[1:5])
summary(transacciones)
seq <- cspade(transacciones,
parameter = list(support = 0.02),
control = list(verbose=F))
seq
inspect(sort(seq, by = "support", decreasing = TRUE)[1:10])
salida <- as(seq, "data.frame") %>% as_tibble()
salida$pattern <- (str_count(salida$sequence, ",") + 1)
salida <- salida[order(-salida$support),]
write.csv(x=salida, file="sequencias_2.csv", row.names=FALSE)
top_10 <- head(sort(itemFrequency(transacciones), decreasing = TRUE),10)
top_10_items_df <- data.frame(item = names(top_10), frequency = top_10)
write.csv(top_10_items_df, file = "top_10_items.csv", row.names = FALSE)
seq_3 <- cspade(transacciones,
parameter = list(support = 0.03),
control = list(verbose=F))
seq_3
seq_3 <- seq_3[size(seq_3,"items")>1]
seq_3
inspect(sort(seq_3, by = "support", decreasing = TRUE)[1:10])
salida <- as(seq_3, "data.frame") %>% as_tibble()
salida$pattern <- (str_count(salida$sequence, ",") + 1)
salida <- salida[order(-salida$support),]
salida$apariciones <- round(salida$support*18054)
salida$apariciones_porcentual <- salida$support*100
write.csv(x=salida, file="sequencias_3.csv", row.names=FALSE)
rm(list = ls())
gc()
transacciones <- read_baskets(con = "datos_basket_uk.txt",
info = c("eventID","sequenceID"))
transacciones
itemsets <- eclat(transacciones,
parameter = list(support = 0.01, minlen = 2),
control = list(verbose=F))
inspect(itemsets)
reglas <- ruleInduction(itemsets, transacciones, confidence = 0.7)
reglas
reglas <- sort(reglas, by = "lift", decreasing = TRUE)
inspect(reglas[1:10])
reglas_df <- as(reglas, "data.frame")
#Reemplazar todos las comas por punto y coma para que se guarde correctamente
reglas_df$rules <- gsub(",", ";", reglas_df$rules)
write.csv(reglas_df[1:10,], file = "reglas_lift_10.csv", row.names = FALSE, quote = FALSE)
library(pacman)
p_load(openxlsx,ggplot2,lubridate,dplyr)
rm(list = ls())
gc()
datos <- read.xlsx("datos_limpios.xlsx")
View(datos)
datos <- distinct(data = datos, "BillNo","Itemname")
datos2 <- distinct(data = datos, "BillNo","Itemname")
datos2 <- distinct(data = datos, BillNo,Itemname)
datos2 <- distinct(data = datos, BillNo)
datos2 <- distinct(data = datos, BillNo)
datos2 <- datos %>% group_by(BillNo,Itemname)
datos2 <- datos %>% group_by(BillNo,Itemname) %>% distinct(BillNo,Itemname)
View(datos2)
rm(list = ls())
gc()
transacciones <- read_baskets(con = "datos_basket_uk.txt",
info = c("eventID","sequenceID"))
library(pacman)
p_load(arules,arulesSequences,openxlsx,dplyr)
transacciones <- read_baskets(con = "datos_basket_uk.txt",
info = c("eventID","sequenceID"))
transacciones
